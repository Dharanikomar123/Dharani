1)Java is Object Oriented programming Language.
2)Java is simpler then c and c++ as we don't have pointer concept, Multiple Inheritance, operator overloading.
3)Java supports multi-threading or multi-tasking.
4)We can develop web-application, network application, standalone application and also mobile application.
5)In java we interface which support the concept of multiple inheritance.
6)In java we have constructor but no destructor. There is automatic garbage clearance.
7)java is secured language. we have 4 access specifier private, public, protected, default.

------------------------------------------
Data types
------------------------------------------
primative datatype
-------------------------
1)byte - 1 byte
2)short - 2 bytes
3)int - 4 bytes
4)long - 8 bytes
5)char - 2 bytes
6)boolen - 1 bit
7)float - 4 bytes
8)double - 8 bytes
-----------------------------------------
derived datatype
----------------------------
1)String
2)array
----------------------------------------
Operator
-------------------
1)unary :-i++,++i,i--,--i

2)binary :-
i)arithmatic :- +,-,*,/,%(modules)
ii)comparative :- <,>,<=,>=
iii)assignment :- =,!=
iv)bitwise :- >>,<<
v)logical:-or, and

3)ternary :- :,?
--------------------------------------
we have 4 access specifier private, public, protected, default.

1)private :- if we declare variable and methods as private we can access it within the class only.
2)public :- if we declare variable and methods as public we can access it within the class, outside the class and also outside the package.
3)protected :- if we declare variable and methods as protected we can access it within the class and also outside the child class.
4)default :- if we declare variable and methods as default we can access it within the class ,out side the class but not outside the package.
Class :- A class is a known as object framework.
A class contains variables and methods.
-------------------------------------------------------------------------------------------------------
Object is a reference pointer to the class.
We can access the variables and methods of a class using Object.
Constructor
-----------------------------
A constructor is a method which has the same name as that of the class name.
It doesnot return any value.it doesnot have any return type.
There are 2 types of constructor
1)default constructor :- it is without any parameter.
2)parameterized constructor :- it is with parameter.
To access a constructor we require an object.
--------------------------------------------------

Difference between constructor and a method.
-----------------------------------------------------------------
1)a method can have any name but a constructor will have only the class name .
2)a method returns a value but constructor does not return any value.

Inheritance
-------------------------------------------------------------------------------
It is one of the oops concept
Reuse of existing code. and we can add some more features to it.
example :- iPhone10 to iPhone15 some new features are add to the older version.
There are 5 types of Inheritance.
1)single Inheritance
2)multi-level Inheritance
3)hierarchal Inheritance
----------------------Java doesn't support---------------------------------
4)multiple inheritance
5)Hybrid inheritance(combination)
------------------------------------------------------------------------------------
we use the keyword extends to inherite the parent class into the child class.
we use the keyword super to access the parent class variables and methods into the child class.
-------------------------------------------------------------------------------------

In inheritance the child class will depend upon the parent class. It is known as tight coupling.
Java supports loose coupling.
Inheritance(IS-A) relationship.
Aggregation(HAS-A) relationship.

polymorphism:-
Method Overloading :- compile time Polymorphism. we need one class.
The method name is same but the return type and parameter has different data type.

Here in the parent class we have the display().
In the child class we have display().We are creating object of the child class.
The child class display() is overriding on the parent class display().The parent class display() is hidden.
----------------------------------------------------------------------------
Abstract class
------------------------
It is a class which contain abstract method means method without body.
It can also contain method with body known as concrete method.
we cannot create object of the abstract class.
we have to inherit it into a child class where we have to override the abstract methods.
Then we can create object for the child class.
We cannot have a method without body .we have to declare it as abstract or it should be inside the interface.
What is the use of abstract class.
It contains some abstract methods which has to be overridden inside the child class.
We can have a constructor in the abstract class.
*abstract windowing toolkit(AWT)

Interface:-
It is similar to abstract class but it only contains abstract methods no concrete methods. we don't use the keyword abstract in this.
We cannot create object for an interface.
We have to implement the interface into a child class.
We have to override the abstract methods into a child class and create object for the child class.
By interface java performs the multiple Inheritance.
we can declare a variable inside a interface .this is by default static(we can access it without object )
and final(cann't be changed)
-----------------------------------------------------

static :- we can declare a variable as static, method as static, we can have static block and we can have static class.
We can access it without creating an object.
We can access it with the help of the class name.
A single copy of the static variable, method, block or class is created in the JVM.
It is used for memory management.
If we declare a static block it execute before the main method.
----------------------------------------------------------------

 final keyword
-------------------------
This is a done to protect the data.
We can declare the variable as final, method as final and class as final.
If we declare variable as final we have to assign it and it cannot be changed.
If we declare method as final we cannot override it.
If we declare a class as final we cannot inherite it.
------------------------------------------------------

we can take the class as public or default.
we cannot declare the class as private or protected.
Because the class has to be accessed by the JVM which is out side the class.
JVM can access default or public access specifier.
-------------------------------------------------------------------------
Wrapper class
----------------------
All datatypes in java are also class known as wrapper class.
1)byte -Byte
2)short - Short
3)int - Integer
4)float - Float
5)double - Double
6)String
7)long - Long
8)char - Character
9)boolean - Boolean
These class belongs to lang package. It is a default package.
---------------------------------------------------------------------
javap java.lang package ---->Integer
javap java.lang.String
javap java.lang.Object -------super class in java.
public static void main(String h[]) 

public is a access specifier so that JVM can access the main method which is outside the package.
static is used so that we can access static variables and methods inside it.and we need not create object of the main()
void is the return type.
main is the keyword for making the method as main.
(String h[]) -- we can pass string arguments inside it.
---------------------------------------------------------------------------------------------
constructor :-
First obj=new First();
First is the class name.
obj is the reference pointer to the class.
new is a keyword which creates the memory block for storing the data.
First() is a default constructor.
-------------------------------------------------------------------------------------------------------------
Exception Handling
------------------------------
There are 3 type of error.
1)compile time error.(manually)
2)logical error(manually)
3)runtime error.
In exception handling we will discuss about only runtime error.
example:-
-------------------
1)dividing a number by zero.
2)crossing the array limit.
3)entering a character in place to number.
The aim of exception handling is we don't want the program to terminate in between.
The program should display an error message but the flow of the program should be till the end.
----------------------------------------------------------------------------
There are 5 keywords used to handle the runtime errors.
1)try
2)catch
3)finally
4)throw
5)throws

There are 3 type of Exception
-------------------------------------------------------------------
1)checked exception(we have to handle it first otherwise it will give compile time error.)
i)IOException
ii)SQLException
iii)ClassNotFoundException
iv)Interrupted Exception
-----------------------------------------------------------------
2)unchecked exception
i)Arithmatic exception
ii)NumberFormat exception
iii)IndexOutOfBound exception
iv)NullPointer exception
v)InputMismatchException
-----------------------------------------------------------------
3)error
i)StackOverFlow error
ii)OutOfMemory error
iii)Machine error

* we cannot put the catch(Exception ae) above the catch(ArithmeticException ae) or catch(InputMismatchException ae).
This will show error unreachable code.
because catch(Exception ae) will handle all type of errors.but catch(ArithmeticException ae) will handle only Arithmatic exception.
--------------------------------------------------------------------------------------------------------------------------------
We generally don't write so many catch block .It will increase the line of code.
and the execution time also increases.so it in not adviceable to write multiple catch block.
--------------------------------------------------------------------
try-catch :-if try is getting error then the catch with handle the error and catch will display the error.
try-finally:-In this if try gets a error or not it doesn't matter the finally block will definitely execute.
It handles the error and mainly used for closing of connection, file closing etc.
Can we write try block without catch block.
yes using finally block.

throws Exception:-
-------------------------------
we don't require any body for throws exception .we mention it with the method.
This is mostly used with checked exception.
when we work with IOException,SQLException,Interrupted Exception etc.

*sleep is a static method so we call it using the class name.
Thread is a class belongs to lang package.
Thread.sleep(1000);
------------------------------------------------------------------
throw keyword
--------------------------------
It is used for user defined exception.
example :- 
1)age should be greater than or equal to 18 years to cast your vote.
2)salary of employee should be greater than 15000.
3)marks should be greater than zero

To create immutable classes in Java, you need to ensure that the state of an object cannot be modified after it's created. Here are the steps to create an immutable class in Java:

Declare the class as final so it can't be extended.
Make all fields private and final so they can only be assigned once.
----------------------------------------------------------------------------------
Lambda Expression
--------------------------------
It is also known as functional interface.
In this the interface will only contain one abstract method so it is called functional interface.
In lambda expression we don't require 2 classes (parent and child).we don't have to override.  we don't have to implement the interface.
There is a annotation @FunctionalInterface.
It is used to declare an interface as functional interface.(optional)
------------------------------------------------------------------------
@Override :- It was introduced from jdk1.5.It will match the methods of the parent class and the child class.
both method name and the signatures(return type, parameter) should match.(optional)
-------------------------------------------------------------------------
what is the use of lambda expression
1)The code is reduced in this.
2)To provide the implementation of functional interface.
3)Generally a interface is non-functional we have to override into the child class and introduce some functionality.
example:- 
interface bank
{
void loan();  <------these are non-functional
void applyforCreditCard();
}
------------------------------------------------------------------
*by using lambda expression we will make the interface as functional.
----------------------------------------------------------------------
There are 3 new components in it.
1)Argument-list:-It can be empty or have parameters.
(),->,{body}
2)Arrow-token:- It is used to link arguments-list and body of the expression.
3)Body:- It contains the expression and statement .
--------------------------------------------------------------------------------------------
()->{System.out.println("Hello");} //no parameter
----------------------------------------------------------------
(a)->{System.out.println("Hello");} //single parameter
----------------------------------------------------------------
(a,b)->{System.out.println("Hello");} //multiple parameter
----------------------------------------------------

We have 3 classes String, StringBuffer, StringBuilder
--------------------------------------------------------------------------
String :-Immutable(cannot be changed).
StringBuffer:-mutable(can be changed)
StringBuilder:-mutable(can be changed)
-----------------------------------------

StringBuffer is synchronized. 
with the methods we use the key word synchronized.
in this after one method complete then the second method start excecuting.
------------------------------------------------------------------------------------------------------
StringBuilder is not synchronized.
StringBuffer takes more time to execute than StringBuilder.
Thread synchronized means one thread complete excecution then the next thread will start execute.
example :-ATM (one person will do the transaction then the second person will do the transaction).

It is a collection of Object.
It provides architecture to store, manipulate group of Objects.
We can do all operations such as searching, sorting, inserting, delete, manipulating .
1)Set 2)List 3)Map 4)queue
Set is a Interface . It does not allow duplicate data.
It has classes :-
1)TreeSet :- It will display the data in the shorted order.
2)HashSet :-It will display the data in random order.
3)LinkedHashSet :- It will display the data in same order.
Autoboxing and Unboxing
------------------------------------------
The autoboxing convert the primitive data types into it equivalent Wrapper type.
The unboxing convert the wrapper type to primitive datatype.

Iterator :- it is used to iterate the data .It is an Interface.
It has 3 methods 
1)hasNext();
2)next();
3)remove();

List :-It is an Interface.
It allows duplicate records.
We have classes 1)Stack 2)ArrayList 3)Linkedlist 4)Vector
stack :FILO .The last element will be index 0.
List display in the same order.

Iterator:-hasNext(),next();remove();//In this we can move in one direction.
ListIterator:- In this we can move in both direction.
forward :- In this we have hasNext(),next().First the pointer with move in forward direction then it will move in backward direction.
backward:- In this we have hasPrevious(),previous();
java.util.Collections
---------------------------------------
It has lot of static methods which can be implemented  set,list,map,queue
It this we have sort() which can sort a list,map,queue.
Collections.sort()

java.lang.Comparable :-
public abstract int compareTo(T);
it is used to sort our own object data.It checks the String ascii code.
in this if the current object is greater than the specified object it return (+) value.
in this if the current object is lesser than the specified object it return (-) value.
in this if the current object is equal than the specified object it return zero value.
java.lang.Comparable :-
public abstract int compareTo(T);
it is used to sort our own object data.It checks the String ascii code.
in this if the current object is greater than the specified object it return (+) value.
in this if the current object is lesser than the specified object it return (-) value.
in this if the current object is equal than the specified object it return zero value.
HashSet is converted to set because we don't have the Interface Iterator in the HashMap. We have it in Set.
entrySet() is used to convert the Map into set.
Map.Entry is a class contain getKey(),getValue()

HashMap :- It gives high performance in the total data-structure of java collection framework.
There are 2 factors which effect the performance of hashmap.
1)Initial Capacity.
2)Load Factor.
------------------------------------------
1)Initial Capacity is 16 bytes.
2)It increases automatically when it reaches to the threshold.
 3)Initially it is 2 pow 4=16,Then it will 2 pow 5=32,then it will be 2 pow 6=64
--------------------------------------------------------------------------------------------------------------------------
Load Factor :- is measured that decides when to increase the HashMap capacity to maintain the get() and put() request.

Queue Interface
------------------------------
It maintains the first-in-first-out order.
It can be defined as an ordered list that is used to hold elements in the same order.
The classes are PriorityQueue, Deque and ArrayDeque .

ArrayDeque :- It is a class. We can remove and add the elements from both sides.
It is also called double-ended queue.
EnumSet :- it sort the data according to the enum list provided.
EnumMap :- in this we will enter key and value pair.

ArrayList :-
1)It internally use dynamic array to store the elements.
2)Manipulation of arraylist is slow.
3)We can add the element at the rear end.

LinkedList:-
1)It internally use double link list to store the elements.
2)Manipulation of Linkedlist is faster.
3)LinkedList class acts like a list and queue.
4)We can add the element at both the ends.

HashMap
1)It is not-synchronized .(not Thread safe we can use this with threads)
2)It allows one null key and multiple null values.
3)This faster than hashTable
4)It is traversed by Iterator.
5)It inherits AbstractMap class.
------------------------------------


HashTable
1)It is synchronized .(Thread safe.we can use with threads)
2)It doesn't allow any null key or value.
3)It is slower than HashMap.
4)It is traversed by Iterator and Enumerator.
5)It inherits Dictionary class.
1)AbstractMap it is the super class of HashMap .we cann't intanceate the AbstractMap so we have to create object of the HashMap.
-------------------------------------------
1)Dictionary it is the super class of HashTable .we cann't intanceate the Dictionary so we have to create object of the HashTable.

Thread:-It is a sort of execution of instruction.

single Thread Program:- Till now we were doing single threaded programing the program start execution from the main() till the end.
------------------------------------------------------------------------------------------------
Multi Thread Program:-
Each thread will do some task.
We can create object of Thread and assign the task.
In this we will have run() and we will have start() .the start() will call the run().
For this we can either extends 
 class or implement runnable interface.
There will be Thread switching .So we will see all the start() exceute at the same time and the output will be a mixture of all the task.
------------------------------------------------------------------------------------------------------
Thread lifecycle
--------------------------
new born thread
start
runnable(choose the thread)
running
block/wait/sleep
dead(excution is completed)a
